# react is a js library (like jquery)
# main reasons people use it: speed (virtual dom) and modularity (components)

# multiple ways to set it up
# 1. using react.min.js (similar to jquery) and basic javascript
# 2. using react.min.js + JSX syntax (you need babel for this)
# 3. using a bundler (like webpack) + npm install + import (ES6)

# 1. react.min.js on cdn
https://unpkg.com/react@16/umd/react.development.js
https://unpkg.com/react-dom@16/umd/react-dom.development.js



# 2. using jsx (without es6)
npm install babel-cli@6 babel-preset-react-app@3

# place source javascript in ./src/
# output will be in ./dst/
npx babel (--watch) ./src --out-dir ./dst --presets react-app/prod



# 3. using es6 + jsx
npm init
npm install webpack webpack-cli --save-dev
npm install react react-dom
npm install babel-loader @babel/core @babel/preset-env @babel/preset-react --save-dev

# configure your webpack.config.js (test1/webpack.config.js.new)
# add runtime: automatic for new jsx transform

# optional: add the new jsx transform
npm install @babel/plugin-transform-react-jsx --save-dev
# add it to .babelrc (example in test4)

# optional: might need babel transform runtime plugin
npm install @babel/plugin-transform-runtime --save-dev

# optional: install transform class properties too
npm install @babel/plugin-proposal-class-properties --save-dev

# it might need immutable
npm install immutable --save

# then run webpack and it should work
npx webpack
webpack (if installed globally)
./node_modules/.bin/webpack

# to avoid running webpack everytime you change the js file
webpack --watch

# to server the file, from dist
python -m SimpleHTTPServer

# you can also use webpack-dev-server
npm install webpack-dev-server --save-dev

# check
webpack.config.js.new.devserver

# more on react

# react.js website
https://reactjs.org/

# wiki page
https://en.wikipedia.org/wiki/React_(JavaScript_library)

# github page
https://github.com/reactjs

# prob useless info - initial release
March 2013

# license
MIT

# so react has multiple components (prob not the best word here)
Flux - small, simple
Redux - more complex data
Relay - big, complex data
GraphQL

# Flux
# just a bunch of ideas/way to work with React
http://facebook.github.io/flux/

# instead of MVC you have Flux
Action -> Dispatcher -> Store -> View

# it's about single directional data flow
# e.g. from top component to bottom one
# more in flux/

# Redux
http://redux.js.org/

# you can also use react on the backend somehow TODO

# there is a react version for mobile too - react native
https://facebook.github.io/react-native/

# you can also use create react app to install it
npm install -g create-react-app
create-react-app my-app

# to run
cd my-app
npm start

# when switching to production
npm run build

# you can also play around with react on codepen
https://codepen.io/gaearon/pen/rrpgNB?editors=0010

# you can use react dev tools (e.g. for chrome browser)
# to see more info on pages that use react
