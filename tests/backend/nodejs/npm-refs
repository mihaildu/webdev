# official website
https://nodejs.org/en/

# repo
https://github.com/nodejs/node

# versions/branches (25.08.2017)
v8.4.0
6.11.2 (LTS)

# my version
v8.2.1

# open the repl
node

# to exit
.exit
# or
C-c C-c

# there is a global object (instead of window from broswer)
var a = 10;
# this should print 10
a;
# this should also print 10
global.a;

# there is no document, but there is process
process

# to run a file (e.g. js_only/)
node file.js

# from my old refs file
# javascript = interpreted
# interpreters for javascript: rhino, node.js
# node.js = more than just an interpreter (runtime env)

# node.js can be installed from repos (on old linux distro up until v0.12)
sudo apt-get install nodejs

# to get newest version of node (v8.x)

# on Ubuntu
curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -

# on Debian
curl -sL https://deb.nodesource.com/setup_8.x | bash -

# or run as root on Debian
sudo apt-get install -y nodejs
node --version

# running a javascript with node
node file.js

# you can also start the cli/repl
node

# npm = node packet manager
# TODO npm installation (might come by default with nodejs)
npm --version

# package manager
npm

# installing a package
npm install underscore

# you can install both frontend and back end stuff with npm
npm install jquery

# this will place jquery in node_modules/jquery/dist
jquery.min.js
...

# however, you can use it with a module bundler like webpack
var $ = require("jquery");

# you can also uninstall a package
npm uninstall underscore

# installing a specific version
npm install package@x.x.x

# npm works similar to composer for php
# it installs packages/frameworks in the current dir
# it needs packages.json
# this works for both frontend and backend packages

# this will install the package in npm_modules/ in current dir
# then you can use packages from there with require (e.g. test2.js)

# turning your code into a package?
# creating the package.json
npm init

# adding a new package to package.json after install
npm install backbone -S
npm install backbone --save

# if you want to install a package that you need for dev (when building the app)
# but you don't want to ship it in production
npm install package --save-dev

# you have to start the webserver first
# e.g. this will listen for connections on port 3000
node test1.js

# installing a package globally
npm install -g express-generator

# global modules location
/usr/local/lib/node_modules/
/usr/lib/node_modules/

# if you don't want to stop the proc and restart it everytime you make a change
# use a monitor thing: nodemon
npm install -g nodemon

# then start the webserver like you normally would
nodemon test1.js

# template engines for node.js
ejs
handlebars
mustache.js (hogan is based on this)
nunjucks

# apparently you can also do template stuff in react.js

# publishing packages to npmjs.com
# the repo where packages are stored - npm registry (basically a db)
https://docs.npmjs.com/misc/registry
https://registry.npmjs.org/

# apparently it uses CouchDB to store data
# you can see what registry your npm uses
npm config ls -l | grep registry

# you can publish any dir with a package.json
# it needs to have "name" and "version" set
# you need a user for the registry first
npm adduser

# check that it stored your info
npm config ls

# you can also view users on npmjs website
https://www.npmjs.com/~user

# finally publish it
npm publish

# to later update the package just update version + publish again
# you can update the version manually by changing "version"
# or use npm
npm version patch
npm publish

# change where global packages are installed
https://github.com/mixonic/docs.npmjs.com/blob/master/content/getting-started/fixing-npm-permissions.md

# the get the current path
npm config get prefix

# optional: make the new directory to store packages
mkdir ~/npm-global

# update the path in npm
npm config set prefix "~/npm-global"

# add the path to $PATH, in .bashrc/.profile
export PATH=~/npm-global/bin:$PATH

# update system variables (if terminal is open)
source ~/.bashrc

# working with modules
https://nodejs.org/api/modules.html

# when it looks for a module, nodejs will start with the current dir
# and then it appends 'node_modules', then it goes up and appends node_modules
# until the root dir
# to see this entire tree you can do (in repl)
require.resolve.paths("some-module")

# on node (backend) you can also do this in src file
console.log(require.resolve("some-module"))

# you can make local packages global on your system with npm link
# run in root directory (with package.json)
npm link

# this will create a symlink in [npm-prefix]/lib/node_modules/
# this is like a local registry of node packages
# this is not the same as installing something globally
# a globally installed package puts the runnable js script in some PATH
# directory so you can run it without specifying path

# to "install" a package from the local registry, run this from root dir
npm link [local-package-name]

# removing a linked package (npm link) - from same directory
npm unlink

# to see all the default values from npm config
# first, change editor
export EDITOR=emacs
npm config edit

# updating npm to its latest version
npm install npm@latest -g

# running a package you installed locally (without -g)
./node_modules./.bin/jest
# or (better version)
npx jest

# npx will look for binaries in node_modules/.bin along the tree

# listing the dependency tree
npm list

# listing all versions for a package
npm list <package>

# using multiple versions of node - nvm
# install
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash

# install a new version of node
nvm install 6.14.4

# listing installed versions
nvm list

# uninstalling a version
nvm uninstall 6.14.4

# listing all possible versions to install
nvm ls-remote

# using a version you installed
nvm use 6.14.4

# going back to system node
nvm deactivate

# running a script with a specific version
nvm run node 6.14.4 script.js

# setting default node version to use
nvm alias default 8.1.0

# you can use major versions
nvm install 16
nvm install 14
nvm install 12

# semantic versioning / semver
^1.0.0 = 1.x
>=1.0.0 = 1.x, 2.x but not 0.x etc
~1.0.0 = 1.0.x
https://docs.npmjs.com/about-semantic-versioning
https://semver.org/
